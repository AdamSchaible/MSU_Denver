// After creating graph, modifying settings, config, installing graph and apoc etc...
// Create "db04" database and "db04" graph.

*** LOADING DATA ***

--- Download "network.json" to Neo4j in "db04" imports
--- Start "db04" in Neo4j
--- Open Neo4j Browser

--- To add all labels, create nodes, set properties and create relationship;
--- Run 1st Querry in "network.cypher" in Neo4j Browser:
CALL apoc.load.json('file:///network.json') YIELD value AS network
MERGE ( a:code { code: network.a.id, name: network.a.name } )
MERGE ( b:code { code: network.b.id, name: network.b.name } )
MERGE (a)-[:knows]->(b);


*** TESTING IF EVERYTHING LOADED CORRECTLY ***

--- To get 411:
MATCH (n) RETURN count(n)

--- To get 1153:
MATCH (n)-[r]->() RETURN COUNT(r)


*** CREATING LABELING.CYPHER ***

--- To generate id->community for export of the json to "nodes.json";
--- Run Query 2 from "network.cypher":
CALL algo.louvain.stream(null, 'knows')
YIELD nodeId, community
RETURN algo.asNode(nodeId).code as id, community
ORDER BY community;

--- Output:
/*
[
  {
    "id": "C0023892",
    "community": 0
  },
  {
    "id": "C0151744",
    "community": 0
  },
  {
    "id": "C0007786",
    "community": 0
  },
  {
    "id": "C0014175",
    "community": 0
  },
...etc.
*/

--- Export the output result to "nodes.json" (to by used by python script).
--- Adjust python script "network.py" from Activity 21
--- to variables in "nodes.json" content, to create "labeling.cypher".
--- (Make sure that "network.py" and "nodes.json" are in this same folder).
/*
import json
fin = open('nodes.json', 'rt', encoding='utf-8-sig')
data = json.load(fin)
fin.close()
communities = {}
for d in data:
    if d['community'] not in communities:
        communities[d['community']] = 1
    else:
        communities[d['community']] += 1
# print(communities)

fout = open('labeling.cypher', 'wt')
for d in data:
    nodeId = d['id']
    community = d['community']
    fout.write("MATCH ( node { code: \'" + str(nodeId) + "\' } ) ")
    if communities[community] >= 10:
        fout.write("SET node: c" + str(community) + "\n")
    else:
        fout.write("DETACH DELETE node\n")
    fout.write("WITH 1 as dummy\n")
fout.write("MATCH(n) RETURN(n)")
fout.close()

*/

--- Run "network.py" script in any IDE to generate output file "labeling.cypher" that will have the cypher code to generate communities graph.
/*
...
MATCH ( node { code: 'C0341703' } ) SET node: c1
WITH 1 as dummy
MATCH ( node { code: 'C0405580' } ) SET node: c1
WITH 1 as dummy
MATCH ( node { code: 'C0034013' } ) SET node: c1
WITH 1 as dummy
MATCH ( node { code: 'C1876165' } ) DETACH DELETE node
WITH 1 as dummy
MATCH ( node { code: 'C0019189' } ) DETACH DELETE node
WITH 1 as dummy
MATCH ( node { code: 'C0011334' } ) SET node: c3
WITH 1 as dummy
MATCH ( node { code: 'C0022596' } ) SET node: c3
WITH 1 as dummy
MATCH ( node { code: 'C0221260' } ) SET node: c3
WITH 1 as dummy
...
*/


*** DISPLAYING THE COMMUNITIES GRAPH ***

--- Copy the whole content of the "labeling.cypher" and run it in the Neo4j Browser.
--- Graph will load.
--- Colors of different communities can also be changed manually.

--- DONE
